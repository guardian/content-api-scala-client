package com.gu.openplatform.contentapi.parser

import org.scalatest.matchers.ShouldMatchers
import org.scalatest.FlatSpec
import JsonFileLoader._
import com.gu.openplatform.contentapi.model.ItemResponse

class ItemJsonParserTest extends FlatSpec with ShouldMatchers {

  // generated by:
  // http://content.guardianapis.com/world/iraq?format=json
  lazy val tagItemResponse: ItemResponse = JsonParser.parseItem(loadFile("item-tag.json"))

  // generated by:
  // http://content.guardianapis.com/travel.json
  lazy val sectionItemResponse = JsonParser.parseItem(loadFile("item-section.json"))


  // generated by:
  // http://content.guardianapis.com/travel/2010/aug/27/britains-best-budget-eats-oxford.json
  //   ?show-related=true
  lazy val contentItemResponse = JsonParser.parseItem(loadFile("item-content.json"))

  // generated by:
  // http://content.guardianapis.com/football/2012/sep/14/zlatan-ibrahimovic-paris-st-germain-toulouse
  // ?format=json&order-by=newest&show-expired=true&api-key=XXXXXXXXXXXXX
  lazy val contentItemExpiredResponse = JsonParser.parseItem(loadFile("item-content-expired.json"))


  "item endpoint parser" should "parse basic reponse header" in {
    tagItemResponse.status should be ("ok")
    tagItemResponse.userTier should be ("free")
  }

  it should "parse pagination" in {
    tagItemResponse.startIndex.get should be (1)
    tagItemResponse.pageSize.get should be (10)
    tagItemResponse.currentPage.get should be (1)
    tagItemResponse.pages.get should be (1993)
    tagItemResponse.total.get should be (19924)
  }

  "item endpoint parser (tag)" should "parse tag information only when a tag url is requested" in {
    val tag = tagItemResponse.tag.getOrElse(fail("expected tag response"))
    tag.webTitle should be ("Iraq")

    tagItemResponse.section should be (None)
    tagItemResponse.content should be (None)
  }

  it should "parse latest content for this tag" in {
    tagItemResponse.results.size should be (10)
    tagItemResponse.results.head.webTitle should be ("USA Today pair hit by smear campaign after Pentagon propaganda story")
  }

  it should "parse expire content for this tag" in {
    tagItemResponse.results(1).isExpired.get should be (true)
  }

  it should "parse latest lead content for this tag" in {
    tagItemResponse.leadContent.size should be (10)
    tagItemResponse.leadContent.head.webTitle should be ("Iraqi cities hit by deadly bomb blasts")
  }

  "item endpoint parser (section)" should "parse section information only when a section url is requested" in {
    val section = sectionItemResponse.section.getOrElse(fail("expected section"))
    section.webTitle should be ("Travel")

    sectionItemResponse.tag should be (None)
    sectionItemResponse.content should be (None)
  }

  it should "parse latest content for this section" in {
    sectionItemResponse.results.size should be (10)
    sectionItemResponse.results.head.webTitle should be ("Oxford's top 10 budget eats")
  }


  "item endpoint parser (content)" should "parse content information only when a content url is requested" in {
    val content = contentItemResponse.content.getOrElse(fail("expected content"))
    content.webTitle should be ("Oxford's top 10 budget eats")

    contentItemResponse.tag should be (None)
    contentItemResponse.section should be (None)
  }

  "item endpoint parser (content)" should "parse know that the content has expired" in {
      val content = contentItemExpiredResponse.content.getOrElse(fail("expected content"))
      content.webTitle should be ("Paris St-Germain 2-0 Toulouse | Ligue 1 match report")

      content.isExpired should be (Some(true))
    }

  it should "parse related content" in {
    contentItemResponse.relatedContent.size should be (10)
    contentItemResponse.relatedContent.head.webTitle should be ("Nottingham's top 10 budget eats")
  }

  it should "not populate paging information" in {
    contentItemResponse.startIndex should be (None)
    contentItemResponse.pageSize should be (None)
    contentItemResponse.currentPage should be (None)
    contentItemResponse.pages should be (None)
    contentItemResponse.total should be (Some(1))
  }
}

package com.gu.openplatform.contentapi.parser

import org.scalatest.matchers.ShouldMatchers
import org.scalatest.FlatSpec
import org.joda.time.DateTime
import JsonFileLoader._

class SearchJsonParserTest extends FlatSpec with ShouldMatchers {

  // generated by:
  // http://content.guardianapis.com/search.json
  //  ?page-size=2&show-fields=all&show-tags=all&show-refinements=all&refinement-size=2
  lazy val searchResponse = JsonParser.parseSearch(loadFile("search.json"))

  // generated by:
  // http://content.guardianapis.com/search.json
  //  ?api-key=<PARTNER KEY>&ids=music/picture/2010/aug/25/georgemichael-ukcrime&show-media=all&show-factboxes=all
  lazy val partnerSearchResponse = JsonParser.parseSearch(loadFile("search-partner.json"))

  // generated by:
  // http://content.guardianapis.com/search.json
  //  ?api-key=<INTERNAL KEY>&ids=music/picture/2010/aug/25/georgemichael-ukcrime&show-media=all&show-factboxes=all&show-elements=all
  lazy val internalSearchResponse = JsonParser.parseSearch(loadFile("search-internal.json"))


  "search endpoint parser" should "parse basic reponse header" in {
    searchResponse.status should be ("ok")
    searchResponse.userTier should be ("free")
  }

  it should "parse pagination" in {
    searchResponse.startIndex should be (1)
    searchResponse.pageSize should be (2)
    searchResponse.currentPage should be (1)
    searchResponse.pages should be (721086)
    searchResponse.total should be (1442171)
  }

  it should "have parse content correctly" in {
    searchResponse.results.size should be (2)
    val content = searchResponse.results.head
    content.id should be ("world/middle-east-live/2012/feb/22/syria-yemen")
    content.sectionId should be (Some("world"))
    content.sectionName should be (Some("World news"))
    content.webPublicationDate should be (new DateTime(2012, 2, 22, 8, 55, 0, 0))
    content.webTitle should be ("Journalists reported killed in Syria  \u2013 live updates")
    content.webUrl should be ("http://www.guardian.co.uk/world/middle-east-live/2012/feb/22/syria-yemen")
    content.apiUrl should be ("http://content.guardianapis.com/world/middle-east-live/2012/feb/22/syria-yemen")
  }

  it should "parse fields" in {
    val fields = searchResponse.results.head.fields

    fields should be (Some(Map(
      "trailText"->"<p>Claim of 500 defectors joining Free Syrian Army<br />Last day of Mubarak's trial in Egypt<br />Nine reported dead in Yemen election violence</p>",
    "headline"->"Journalists reported killed in Syria \u2013Â live updates",
    "showInRelatedContent"->"true",
    "lastModified"->"2012-02-22T08:56:42Z",
    "hasStoryPackage"->"false",
    "standfirst"->"Claim of 500 defectors joining Free Syrian Army<br />Last day of Mubarak's trial in Egypt<br />Nine reported dead in Yemen election violence",
    "shortUrl"->"http://gu.com/p/35jmv",
    "thumbnail"->"http://static.guim.co.uk/sys-images/Guardian/Pix/pictures/2012/2/21/1329868492281/House-in-the-city-of-Homs-002.jpg",
    "commentable"->"true",
    "byline"->"Brian Whitaker and Haroon Siddique",
    "publication"->"guardian.co.uk",
    "shouldHideAdverts"->"false",
    "liveBloggingNow"->"true"
      )))
  }

  it should "parse tags" in {
    val tags = searchResponse.results.head.tags

    tags.size should be (14)

    val edinburgh = tags.head
    edinburgh.id should be ("world/middle-east-live")
    edinburgh.tagType should be ("blog")
    edinburgh.webTitle should be ("Middle East Live")
    edinburgh.webUrl should be ("http://www.guardian.co.uk/world/middle-east-live")
    edinburgh.apiUrl should be ("http://content.guardianapis.com/world/middle-east-live")
    edinburgh.sectionId should be (Some("world"))
    edinburgh.sectionName should be (Some("World news"))

    // and check optional sections work
    tags(1).id should be ("tone/minutebyminute")
    tags(1).sectionId should be (None)

    // and check optional contributor bios
    tags(11).id should be ("profile/brianwhitaker")
    tags(11).bio should be (Some("<p>Brian Whitaker has done a variety of jobs at the Guardian including, most recently, seven years as Middle East editor. He is currently an editor on Comment is Free. He is the author of <a href=\"http://www.al-bab.com/unspeakablelove/\">Unspeakable Love: Gay and Lesbian Life in the Middle East</a> (Saqi, 2011) and <a href=\"http://www.al-bab.com/whatsreallywrong/\">What's <em>Really</em> Wrong with the Middle East</a> (Saqi, 2009)</p>"))
    tags(11).bylineImageUrl should be (Some("http://static.guim.co.uk/sys-images/Guardian/Pix/contributor/2007/10/03/brian_whitaker_140x140.jpg"))
  }

  it should "parse refinement groups" in {
    val refinements = searchResponse.refinementGroups

    refinements.size should be (11)
    val keywords = refinements.head
    keywords.`type` should be ("date")
    keywords.refinements.size should be (2)

    keywords.refinements.head.count should be (62)
    keywords.refinements.head.displayName should be ("Today")
  }

  it should "parse factboxes" in {
    searchResponse.results.head.factboxes should be (Nil)
    val factboxes = partnerSearchResponse.results.head.factboxes

    factboxes.size should be (1)
    factboxes.head.`type` should be ("photography-tip")
    factboxes.head.fields should be (Some(Map(
      "proTip" -> "By using auto-focus, continuous shooting mode and holding his camera above the crowd, the photographer has managed to capture the scene"
    )))
  }

  it should "parse media assets" in {
    searchResponse.results.head.mediaAssets should be (Nil)

    val mediaAssets = partnerSearchResponse.results.head.mediaAssets
    mediaAssets.size should be (2)
    mediaAssets.head.`type` should be ("picture")
    mediaAssets.head.file should be (Some("http://static.guim.co.uk/sys-images/Guardian/Pix/pictures/2010/8/25/1282722354152/george-michael-appears-in-003.jpg"))

    mediaAssets.head.fields should be (Some(Map(
         "source" -> "Getty Images",
          "photographer" -> "Peter Macdiarmid",
          "height" -> "519",
          "credit" -> "Peter Macdiarmid/Getty Images",
          "altText" -> "george michael appears in court charged with driving offences",
          "caption" -> "Singer George Michael leaves  Highbury magistrates court surrounded by press and police. Michael pleaded guilty to driving under the influence of drugs and possessing cannabis after he crashed his car into a  shop in London. The singer has been warned that he may face a custodial sentence after a previous similar offence",
          "width" -> "780"    
      )))
  }

  it should "parse element assets" in {
    assert(!searchResponse.results.head.elements.isDefined, "Elements should not be listed when show-elements is not a parameter")

    val elementAssets = internalSearchResponse.results.head.elements
    assert(elementAssets.isDefined, "Elements should be listed when show-elements is a parameter")

    val elements = elementAssets.get
    elements.size should be(1)
    val element = elements.head


    element.id should be("gu-image-1234")
    element.elementType should be("image")
    element.relation should be("main")
    element.assets.size should be(2)

    val asset1 = element.assets(0)
    asset1.assetType should be("image")
    asset1.file.get should be("http://static.guim.co.uk/sys-images/Guardian/Pix/pictures/2010/8/25/1282722355694/george-michael-appears-in-004.jpg")
    asset1.mimeType.get should be("image/jpeg")
    asset1.typeData should be(Map(
      "source" -> "Getty Images",
      "photographer" -> "Peter Macdiarmid",
      "altText" -> "george michael appears in court charged with driving offences",
      "height" -> "768",
      "credit" -> "Peter Macdiarmid/Getty Images",
      "caption" -> "Singer George Michael leaves  Highbury magistrates court surrounded by press and police. Michael pleaded guilty to driving under the influence of drugs and possessing cannabis after he crashed his car into a  shop in London. The singer has been warned that he may face a custodial sentence after a previous similar offence",
      "width" -> "1024"

    ))

    val asset2 = element.assets(1)
    asset2.assetType should be("image")
    asset2.file.get should be("http://static.guim.co.uk/sys-images/Guardian/Pix/pictures/2010/8/25/1282722354152/george-michael-appears-in-003.jpg")
    asset2.mimeType.get should be("image/jpeg")
    asset2.typeData should be(Map(
      "source" -> "Getty Images",
      "photographer" -> "Peter Macdiarmid",
      "altText" -> "george michael appears in court charged with driving offences",
      "height" -> "519",
      "credit" -> "Peter Macdiarmid/Getty Images",
      "caption" -> "Singer George Michael leaves  Highbury magistrates court surrounded by press and police. Michael pleaded guilty to driving under the influence of drugs and possessing cannabis after he crashed his car into a  shop in London. The singer has been warned that he may face a custodial sentence after a previous similar offence",
      "width" -> "780"

    ))
  }

  it should "parse references" in {
    searchResponse.results.head.references.size should be (0)
  }
}